#parses a tabular file and outputs GI, accession, species name, and seq, writing them to fasta
rule tab_to_fasta:
	input:
		"blast_out/{sample}"
	output:
		"blasted_fastas/{sample}"
	shell:
		"awk 'BEGIN { # }{ print '>'$1, $2 }' {input} > {output}"
#
# #-db nt = database nucleotide
# #-remote = sends search to NCBI servers
# #-outfmt = changes format of output. in this case xml is the favoured format
#
# #this will parse an xml file for seq and title
#
rule xml_to_fasta:
	run:
		blast_record = NCBIXML.read({input})
		write....
# #
#
#
# # #this rule converts sams to bams
rule sam_to_bam:
	input:
		"blasted_sams/{sample}.sam"
	output:
		"blasted_bams/{sample}.bam"
	shell:
		"samtools view -Sb {input} > {output}"
#
#
# #this rule converts bams to fasta
rule bam_to_fasta:
	input:
		"blasted_bams/{sample}.bam"
	output:
		"blasted_fastas/{sample}.fasta"
	shell:
		"samtools fasta {input} -0 {output}"
# #
# #
# # #this runs fastas through mafft to align them

rule efetch_fasta_download_script:
	input:
		"transformed_accs/{sample}"
	output:
		"scripts/fasta_pull_{sample}.sh"
	shell:
		"sed 's/^/efetch -db nucleotide -format fasta -id /' {input} > {output}"

rule fasta_from_acc:
	input:
		"scripts/fasta_pull_{sample}.sh"
	output:
		"pulled_fastas/{sample}.txt"
	shell:
		"bash {input} > {output}"

rule gb_from_acc:
	input:
		"scripts/gb_pull_{sample}.sh"
	output:
		"pulled_gb/{sample}.gb"
	shell:
		"bash {input} > {output}"

# #this is going to need the login thing
rule efetch_genbank_download_script:
	input:
		"transformed_accs/{sample}"
	output:
		"scripts/gb_pull_{sample}.sh"
	shell:
		"sed 's/^/efetch -db nucleotide -id /' {input} > {output}"
